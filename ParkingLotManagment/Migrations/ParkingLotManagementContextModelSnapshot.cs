// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingLotManagment.DataBase;

#nullable disable

namespace ParkingLotManagment.Migrations
{
    [DbContext(typeof(ParkingLotManagementContext))]
    partial class ParkingLotManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParkingLotManagment.Models.Administador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("EstacionamientoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimoAcceso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Legajo")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimoAcceso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Estacionamiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPlazas")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDeVehiculos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estacionamientos");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("TipoDeVehiculo")
                        .HasColumnType("int");

                    b.Property<int>("TipoPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Ingreso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Salida")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Tarifa")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehiculoPatente")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VehiculoPatente");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Vehiculo", b =>
                {
                    b.Property<string>("Patente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EstacionamientoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDeVehiculo")
                        .HasColumnType("int");

                    b.HasKey("Patente");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Administador", b =>
                {
                    b.HasOne("ParkingLotManagment.Models.Estacionamiento", "Estacionamiento")
                        .WithMany()
                        .HasForeignKey("EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Ticket", b =>
                {
                    b.HasOne("ParkingLotManagment.Models.Vehiculo", null)
                        .WithMany("Tickets")
                        .HasForeignKey("VehiculoPatente");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Vehiculo", b =>
                {
                    b.HasOne("ParkingLotManagment.Models.Cliente", null)
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteId");

                    b.HasOne("ParkingLotManagment.Models.Estacionamiento", null)
                        .WithMany("Plazas")
                        .HasForeignKey("EstacionamientoId");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Cliente", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Estacionamiento", b =>
                {
                    b.Navigation("Plazas");
                });

            modelBuilder.Entity("ParkingLotManagment.Models.Vehiculo", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
